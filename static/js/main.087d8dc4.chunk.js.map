{"version":3,"sources":["App.tsx","registerServiceWorker.js","index.tsx"],"names":["styles","createStyles","container","padding","title","textAlign","dataContent","display","justifyContent","borderRadius","backgroundColor","demoform","margin","App","_this$props","this","props","classes","dataAsString","react_default","a","createElement","className","Grid_default","justify","spacing","item","sm","Typography_default","variant","lib","React","Component","connect","state","JSON","stringify","getData","withStyles","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initState","jsonforms","cells","materialCells","renderers","materialRenderers","rootReducer","combineReducers","jsonformsReducer","store","createStore","ajv","createAjv","useDefaults","dispatch","Actions","init","schema","uischema","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.087d8dc4.chunk.js","sourcesContent":["import { connect } from 'react-redux';\nimport { JsonForms } from '@jsonforms/react';\nimport React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport {getData, JsonFormsState} from '@jsonforms/core';\nimport logo from './logo.svg';\nimport './App.css';\nimport createStyles from \"@material-ui/core/styles/createStyles\";\n\nconst styles = createStyles({\n  container: {\n    padding: '1em'\n  },\n  title: {\n    textAlign: 'center',\n    padding: '0.25em'\n  },\n  dataContent: {\n    display: 'flex',\n    justifyContent: 'center',\n    borderRadius: '0.25em',\n    backgroundColor: '#cecece',\n  },\n  demoform: {\n    margin: 'auto'\n  }\n});\n\nexport interface AppProps extends WithStyles<typeof styles> {\n  dataAsString: string;\n}\n\nclass App extends React.Component<AppProps, any> {\n\n  render() {\n    const { classes, dataAsString } = this.props;\n    return (\n      <div>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"App-title\">JSON Forms for SciData</h1>\n          </header>\n        </div>\n\n        <Grid container justify={'center'} spacing={24} className={classes.container}>\n          <Grid item sm={6}>\n            <Typography\n              variant={'display1'}\n              className={classes.title}\n            >\n              Data State\n            </Typography>\n            <div className={classes.dataContent}>\n              <pre>{dataAsString}</pre>\n            </div>\n          </Grid>\n          <Grid item sm={6}>\n            <Typography\n              variant={'display1'}\n              className={classes.title}\n            >\n              Form for Data Input\n            </Typography>\n            <div className={classes.demoform}>\n              <JsonForms/>\n            </div>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: JsonFormsState) => {\n  return { dataAsString: JSON.stringify(getData(state), null, 2) }\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(App));\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { combineReducers, createStore, Reducer, AnyAction } from 'redux';\nimport { Provider } from 'react-redux';\nimport schema from './schema/scidata_unit.json';\nimport uischema from './uischema/scidata_unit.json';\nimport { Actions, jsonformsReducer, JsonFormsState, createAjv } from '@jsonforms/core';\nimport { materialCells, materialRenderers } from '@jsonforms/material-renderers';\n\n\nconst data = {};\n\nconst initState: JsonFormsState = {\n    jsonforms: {\n      cells: materialCells,\n      renderers: materialRenderers\n    }\n}\n\nconst rootReducer: Reducer<JsonFormsState, AnyAction> = combineReducers({ jsonforms: jsonformsReducer() });\nconst store = createStore(rootReducer, initState);\n\nconst ajv = createAjv({\n    useDefaults: true\n})\n\nstore.dispatch(Actions.init(data, schema, uischema, ajv));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}